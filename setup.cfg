[metadata]
name = apexpy
version = 1.0.4
license = MIT
description = A Python wrapper for Apex coordinates
author = Christer van der Meeren; Angeline G. Burrell; Michael Hirsch
author_email = agb073000@utdallas.edu
url = https://github.com/aburrell/apexpy
license_file = LICENSE
keywords =
  apex
  modified apex
  quasi-dipole
  quasi dipole
  coordinates
  magnetic coordinates
  mlt
  magnetic local time
  conversion
  converting
classifiers =
  Development Status :: 5 - Production/Stable
  Intended Audience :: Science/Research
  License :: OSI Approved :: MIT License
  Operating System :: OS Independent
  Programming Language :: Fortran
  Programming Language :: Python
  Programming Language :: Python :: 2.7
  Programming Language :: Python :: 3
  Programming Language :: Python :: 3.4
  Programming Language :: Python :: 3.5
  Programming Language :: Python :: 3.6
  Programming Language :: Python :: Implementation :: CPython
  Topic :: Scientific/Engineering :: Physics
  Topic :: Utilities
long_description = file: README.rst, CHANGELOG.rst

[options]
python_requires = >= 2.7
setup_requires =
  setuptools >= 40.6.0
  pip >= 10
  twine >= 1.11
include_package_data = True
zip_safe = False
package_dir=
    =src
packages = find:
install_requires =
  numpy

[options.entry_points]
console_scripts =
  apexpy = apexpy.__main__:main

[options.data_files]
data = apexpy/apexsh.dat

[options.packages.find]
where=src

[aliases]
release = register clean --all sdist

[isort]
line_length=120
known_first_party=apexpy
default_section=THIRDPARTY
length_sort=1
multi_line_output=0

[matrix]
# This is the configuration for the `./bootstrap.py` script.
# It generates `.travis.yml`, `tox.ini` and `appveyor.yml`.
#
# Syntax: [alias:] value [!variable[glob]] [&variable[glob]]
#
# alias:
#  - is used to generate the tox environment
#  - it's optional
#  - if not present the alias will be computed from the `value`
# value:
#  - a value of "-" means empty
# !variable[glob]:
#  - exclude the combination of the current `value` with
#    any value matching the `glob` in `variable`
#  - can use as many you want
# &variable[glob]:
#  - only include the combination of the current `value`
#    when there's a value matching `glob` in `variable`
#  - can use as many you want

python_versions =
    2.7
    3.4
    3.5
    3.6

dependencies =
#    1.4: Django==1.4.16 !python_versions[3.*]
#    1.5: Django==1.5.11
#    1.6: Django==1.6.8
#    1.7: Django==1.7.1 !python_versions[2.6]
# Deps commented above are provided as examples. That's what you would use in a Django project.

coverage_flags =
    : true
    nocover: false

environment_variables =
    -

